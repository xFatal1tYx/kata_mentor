Зачем нужно функциональное программирование?

Функциональное программирование — одна из двух наиболее известных парадигм программирования (другая — ООП)

В отличие от ООП, функциональное программирование характеризуется слабой связью функции с данными, которыми она оперирует. 
Это позволяет избежать побочных эффектов при выполнении функций — например чтения и изменения глобальных переменных, операций ввода-вывода.
Детерминированные функции ФП возвращают один и тот же результат для одних и тех же аргументов. 
(ФП фокусируется на чистых математических функциях и неизменяемых данных)

Его принципы можно использовать, практически, на любом языке, но есть специальные функциональные языки: пр. Elixir, Haskell

При таком подходе, каждая отдельная функция используется как объект. 
А это значит, что функцию можно: 
- присвоить переменным;
- передать в виде аргумента другой функции;
- возвратить в качестве результата от другой функции;

Поскольку, в Java нет функций (только методы классов), реализация функционального программирования 
происходит засчёт анонимных классов и функций (лямбда-выражений)

Из преимуществ такого подхода можно выделить:
- более легкая отладка за счет использования «чистых» функций и неизменных данных;
- отложенное вычисление (функциональная программа вычисляется только при надобности);
- модульность («чистые» функции можно использовать в разных областях одного кода);
- улучшенная читабельность (поведение каждой отдельной функции предсказуемо и неизменно);
- облегченное параллельное программирование

Обычно функциональное программирование имеет смысл применять тогда, 
когда программные решения легко выражаются при помощи функций и не имеют тесной связи с реальным миром. 
ООП чаще всего реализуется, когда программа моделируется с использованием объектов из реальной жизни.
