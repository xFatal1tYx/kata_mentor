Промежуточные операции

У stream может быть сколько угодно вызовов промежуточных ("intermediate", "lazy») методов (они выполняются лениво), 
т.е. пока не будет вызван терминальный метод никаких действий на самом деле не происходит.

Chaining в stream - использование методов друг за другом в цепочкею.	

Промежуточные методы:
filter(n -> n % 2 == 0) – оставляет элементы, соответствующие фильтру (предикату);
sorted() – сортирует стрим по возрастанию (умолч.), можно задать свой компаратор;
skip(4) – пропускает первые N элементов;
limit(4) – оставляет в стриме только первые N элементов;
distinct() – возвращает стрим без дубликатов (метод equals);
peek(System.out::println) – позволяет получить доступ к каждому элементу, не изменяя его;
map(n -> n*2) – проделывает заданную операцию, с каждым элементом стрима;
mapToInt/Double/Long() – аналог map, но возвращает числовой стрим;
flatMap()/toInt/Double/Long() – позволяет объединить несколько коллекций в одну;

Stream<List<Integer>> integerListStream = Stream.of(Arrays.asList(1, 2), Arrays.asList(3, 4));
integerListStream.flatMap(Collection::stream);
