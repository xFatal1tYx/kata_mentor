Почему 0.1 + 0.7 != 0.8? Подробно рассказать о том - почему нельзя точно представить вещественное число в двоичной системе счисления.

Результатом выполнения 0.1 + 0.7 будет 0.7999999999999999.

Данные в памяти компьютера хранятся в виде двоичного кода. 
Поскольку в двоичной системе нельзя использовать знаки, был придуман стандарт IEEE-754, в котором число представлено в виде формулы: 
(-1)^s * M * 2^e, где s – знак числа, M – мантисса, e – экспонента.

Под знак выделяется 1 бит, под экспоненту 8 бит, под мантиссу оставшиеся 23 бита (float, одинарная точность) или 52 бита (double, двойная точность).

При преобразовании дробного числа в двоичное, мы можем получить «бесконечный» результат, который не уместится ни в 23 бита, ни в 52. 
Компьютеры способны работать с вещественными числами только до определенной точности, из-за этого в конечном результате появляется небольшая погрешность. 
Поэтому при сравнении вещественных чисел используют формулу:
(a - b) < E, где E – epsilon задаётся, как допустимая погрешность

В Java существует специальный класс BigDecimal, у которого теоретически нет максимального размера.
Он поможет значительно увеличить точность конечного результата. Но даже это не даёт гарантии в отсутствии погрешности.
