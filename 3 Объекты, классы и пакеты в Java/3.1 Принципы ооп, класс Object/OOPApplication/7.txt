Объяснить для чего нужны и как работают все парадигмы. К каждой привести пример.

Наследование заключается в использовании уже существующих классов для описания новых. Класс может наследоваться от других классов (родителей). Для этого используется слово extends
Таким образом, наследованный класс имеет доступ ко всем неприватным полям и методам от класса-родителя.
- Все наследованные поля и методы имеют видимость доступа соответственно access модификаторам;
- У класса может быть только один родитель;
- Наследованный класс называют - Derived, Child, Sub, Extended class;
- Родительский класс называют - Super, Parent, Base class;
- Конструкторы НЕ наследуются. Поэтому, нам обязательно нужно определить конструктор в subклассе (если у класса родителя есть нулевой конструктор, то компилятор автоматически его создаст и в наследованном классе).

Абстракция в Java применима к классам и методам.
Абстрактные классы используются, когда мы не можем заранее знать логику объекта, но можем выделить его главные свойства. 
Т.е. абстрактный класс может содержать в себе методы без реализации, а после его наследования дочерний класс должен переопределить все абстрактные методы, либо сам быть абстрактным.
Невозможно создать объект abstract класса!

Инскапсуляция – механизм, позволяющий объединить данные и методы в единый объект, а также скрыть детали реализации, защитив их от внешнего нежелательного вмешательства.
С помощью модификаторов доступа, программист должен определить какие поля и методы будут доступны для открытого доступа вне класса, и как скрыть внутреннюю реализацию взаимодействия с этими полями от пользователя. 
Чаще всего для этого используют private переменные и public методы get, set, is

Полиморфизм – способность объекта принимать несколько форм, а также способность метода вести себя по-разному в зависимости от того, объект какого класса вызывает этот метод
Объект считается полиморфным если имеет более одной связи IS-A
Поскольку любой класс наследуется от класса object, он уже имеет свою связь и связь с классом родителем – object.
Полиморфизм тесно связан с наследованием, поскольку для каждого subкласса, метод объекта этого класса будет вызываться иначе.
Полиморфизм бывает:
- Статический, в момент компиляции программы
- Динамический, в момент работы программы (переопределение методов)
- Параметрический (дженерики), разные объекты на основе одного класса
