Что такое логирование? Для чего оно нужно?

Логирование дает возможность отслеживать ход исполнения программы и записывает сведения о своем исполнении в некий файл или базу данных.
В стандартной библиотеке Java, есть набор классов для логирования.
java.util.logging.*

Преимущество перед sout:
- Точечная настройка логирования;
- Настройка уровня детальности;
- Настройка места сохранения логов;
- Настройка удобного формата вывода.

Правильным будет логировать следующие моменты:
- Начало/конец работы приложения;
- Вопросы безопасности (попытки подбора пароля, логирование входа важных юзеров и т.д.);
- Некоторые состояния приложения (переход из одного состояния в другое в бизнес процессе);
- Информацию для дебага;
- Некоторые SQL скрипты;
- Выполняемые потоки (Thread) (в случаях необходимости проверки корректной работы).

Чтобы объявить логгер необходимо создать объект класса Logger:
private static final Logger LOGGER = Logger.getLogger(имя_класса.class.getName());
или так: private static final Logger LOGGER = Logger.getGlobal();

Примеры вывода:
LOGGER.log(Level.INFO, "I'm logging");
LOGGER.warning("We have a problem!");

Для дальнейшего логирования LOGGER передаёт сообщение другому классу Handler, который определяет куда будет записано сообщение (LOGGER.addHandler())

java.util.logging.ConsoleHandler,  //вывод в консоль
FileHadler //вывод в файл
SocketHandler //вывод по сети

А java.util.logging.Formatter определяет формат вывода и имеет два формата SimpleFormatter и XMLFormatter.
Для задания параметров логирования можно редактировать файл logging.properties.



ДОП.Известные библиотеки логирования Java.

1) Apache log4j (не был добавлен в JDK). Это первый набор инструментов для логирования Java, который появился еще в 1999 году. 
Внутри себя имеет различные способы вывода логов, несколько форматов логирования и многое другое. 
Раньше данная библиотека активно применялась, но уже долгое время этот проект не развивается. 
Log4j добавил понятие appender – инструмент, с помощью которого записываются логи и layot – форматирование логов.

2)  JUL (java.util.logging, включён в JDK). Имеет множество уровней логирования. 
Для отладки у этого инструмента есть в арсенале 3 отладочных уровня вместо одного стандартного.
Начиная с Java8 в него можно передавать Supplier<String>, что помогает создавать строки только в момент необходимости.

3) SLF4J (simple logging facade for java). 
Этот инструмент является оберткой над многими популярными логгерами, например: logback, log4j, jul и др.
Поэтому его рекомендуется использовать в паре с полноценной библиотекой для логирования.

4) Logback был создан как альтернатива умирающему log4j, поэтому он вобрал в себя все лучшее из этого инструмента, при этом усовершенствовал некоторые показатели.
